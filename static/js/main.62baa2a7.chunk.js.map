{"version":3,"sources":["pages/AddTodo/index.js","containers/AddTodo/index.js","redux/actions/index.js","redux/actionTypes/index.js","pages/TodoList/index.js","containers/TodoList/index.js","App.js","serviceWorker.js","redux/reducer/index.js","index.js","redux/index.js"],"names":["AddTodo","props","inputDom","add","ref","e","type","onClick","task","value","trim","className","connect","dispatch","addTodo","TodoList","list","toggle","del","length","map","item","key","id","done","state","toggleTodo","deleteTodo","App","Boolean","window","location","hostname","match","initdata","reducer","action","console","log","Math","random","toString","slice","newTodo","filter","tempItem","ReactDOM","render","store","createStore","subscribe","getState","configStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OA0BeA,MAvBf,SAAiBC,GAAQ,IAInBC,EAHIC,EAAQF,EAARE,IAcR,OACE,6BACE,2BAAOC,IAAK,SAACC,GAAD,OAAOH,EAAWG,GAAGC,KAAK,SACtC,4BAAQC,QAZE,WACZ,IAAIC,EAAON,EAASO,MAAMC,OAErBF,IACLL,EAAIK,GAEJN,EAASO,MAAQ,KAMWE,UAAU,OAApC,kBCLSC,cACb,MAVyB,SAACC,GAC1B,MAAO,CACLV,IAAK,SAACK,GACJK,ECFU,SAAAL,GAAI,MAAK,CAAEF,KCDV,WDC0BE,QDE5BM,CAAQN,QAMRI,CAGbZ,GGWae,MA5Bf,SAAkBd,GAAQ,IAChBe,EAAsBf,EAAtBe,KAAMC,EAAgBhB,EAAhBgB,OAAQC,EAAQjB,EAARiB,IAStB,OAAoB,IAAhBF,EAAKG,OACA,uDAGP,4BAEIH,EAAKI,KAAI,SAACC,GAAD,OAAU,wBAAIC,IAAKD,EAAKE,IAC/B,0BAAMhB,QAAS,kBAdAgB,EAcoBF,EAAKE,QAb9CN,EAAOM,GADa,IAACA,GAc8BZ,UAAWU,EAAKG,KAAO,OAAS,IAAKH,EAAKb,MACtFa,EAAKG,KAAO,4BAAQb,UAAU,iBAAlB,UAAqD,KAClE,4BAAQJ,QAAS,kBAZRgB,EAYsBF,EAAKE,QAX1CL,EAAIK,GADU,IAACA,GAYgCZ,UAAU,kBAAnD,cCIKC,eAlBS,SAACa,GACvB,MAAO,CACLT,KAAMS,MAIiB,SAACZ,GAC1B,MAAO,CACLI,OAAQ,SAACM,GACPV,EHNa,SAAAU,GAAE,MAAK,CAAEjB,KCDR,cDC2BiB,MGMhCG,CAAWH,KAEtBL,IAAK,SAACK,GACJV,EHVa,SAAAU,GAAE,MAAK,CAAEjB,KCDR,cDC2BiB,MGUhCI,CAAWJ,QAMXX,CAGbG,GCVaa,MAXf,WACE,OACE,yBAAKjB,UAAU,YAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCDckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBAC,EAAW,CACf,CAAEX,GAAI,EAAGf,KAAM,eAAMgB,MAAM,GAC3B,CAAED,GAAI,EAAGf,KAAM,eAAMgB,MAAM,GAC3B,CAAED,GAAI,EAAGf,KAAM,eAAMgB,MAAM,IAyBdW,EAvBC,WAA+B,IAA9BV,EAA6B,uDAArBS,EAAUE,EAAW,uCAC5C,OAAQA,EAAO9B,MACb,ILFa,WKGX+B,QAAQC,IAAI,OAEZ,IAAIf,EAAKgB,KAAKC,SAASC,SAAS,IAAIC,MAAM,GACpCC,EAAO,sBAAOlB,GAAP,CAAc,CAAEF,KAAIf,KAAM4B,EAAO5B,KAAMgB,MAAM,KAC1D,OAAOmB,EACT,ILPgB,cKQd,OAAOlB,EAAMmB,QAAO,SAACvB,GAAD,OAAUA,EAAKE,KAAOa,EAAOb,MACnD,ILRgB,cKSd,OAAOE,EAAML,KAAI,SAACC,GAChB,IAAIwB,EAAQ,eAAQxB,GAIpB,OAHIwB,EAAStB,KAAOa,EAAOb,KACzBsB,EAASrB,MAAQqB,EAASrB,MAErBqB,KAEX,QACE,OAAOpB,IChBbqB,IAASC,OACP,kBAAC,IAAD,CAAUC,MCJG,WACb,IAAMA,EAAQC,YAAYd,GAM1B,OALAE,QAAQC,IAAIU,GAEZA,EAAME,WAAU,WACdb,QAAQC,IAAI,MAAOU,EAAMG,eAEpBH,EDHUI,IACf,kBAAC,EAAD,OAGFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.62baa2a7.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction AddTodo(props) {\n  const { add } = props;\n\n  // 获取元素对象\n  let inputDom;\n  // 添加任务\n  let addTask = () => {\n    let task = inputDom.value.trim();\n    // 处理空值\n    if (!task) return;\n    add(task);\n    // 清空输入\n    inputDom.value = ''\n  }\n\n  return (\n    <div>\n      <input ref={(e) => inputDom = e} type=\"text\" />\n      <button onClick={addTask} className=\"btn\">添加</button>\n    </div>\n  );\n}\n\nexport default AddTodo;","/**\n * 添加任务容器\n */\nimport { connect } from 'react-redux'\nimport AddTodo from '../../pages/AddTodo'\nimport { addTodo } from '../../redux/actions'\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    add: (task) => {\n      dispatch(addTodo(task))\n    }\n  }\n}\n\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(AddTodo)\n\n","// action\n\nimport { ADD_TODO, DELETE_TODO, TOGGLE_TODO } from '../actionTypes'\n\n// addTodo\n// deleteTodo\n// toggleTodo\n\nconst addTodo = task => ({ type: ADD_TODO, task })\nconst deleteTodo = id => ({ type: DELETE_TODO, id })\nconst toggleTodo = id => ({ type: TOGGLE_TODO, id })\n\nexport { addTodo, deleteTodo, toggleTodo }","// actionTypes\n/**\n * 1. 添加\n * 2. 删除\n * 3. 切换任务状态\n */\n\nconst ADD_TODO = 'ADD_TODO'\nconst DELETE_TODO = 'DELETE_TODO'\nconst TOGGLE_TODO = 'TOGGLE_TODO'\n\nexport { ADD_TODO, DELETE_TODO, TOGGLE_TODO }","import React from 'react';\n\nfunction TodoList(props) {\n  const { list, toggle, del } = props;\n  // 切换任务状态\n  const handlerToggle = (id) => {\n    toggle(id)\n  }\n  // 删除任务\n  const delTask = (id) => {\n    del(id)\n  }\n  if (list.length === 0) {\n    return <p>暂无任务</p>\n  }\n  return (\n    <ul>\n      {\n        list.map((item) => <li key={item.id}>\n          <span onClick={() => handlerToggle(item.id)} className={item.done ? 'done' : ''}>{item.task}</span>\n          {item.done ? <button className='btn-status ok'>&radic;</button> : null}\n          <button onClick={() => delTask(item.id)} className=\"btn-status del\">&times;</button>\n        </li>)\n      }\n\n    </ul>\n  );\n}\n\n\nexport default TodoList;","/**\n * 任务列表容器\n */\nimport { connect } from 'react-redux'\nimport TodoList from '../../pages/TodoList'\nimport { toggleTodo, deleteTodo } from '../../redux/actions'\n\nconst mapStateToProps = (state) => {\n  return {\n    list: state\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toggle: (id) => {\n      dispatch(toggleTodo(id))\n    },\n    del: (id) => {\n      dispatch(deleteTodo(id))\n    }\n  }\n}\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)","import React from 'react';\n// import AddTodo from './pages/AddTodo';\n// import TodoList from './pages/TodoList';\n// 引入容器组件\nimport AddTodo from './containers/AddTodo'\nimport TodoList from './containers/TodoList'\n\nfunction App() {\n  return (\n    <div className=\"todoList\">\n      {/* 添加任务 */}\n      <AddTodo />\n      {/* 任务列表 */}\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actionTypes'\n\nconst initdata = [\n  { id: 1, task: '学习', done: true },\n  { id: 2, task: '健身', done: false },\n  { id: 3, task: '游戏', done: false }\n]\nconst reducer = (state = initdata, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TODO:\n      console.log('add')\n      // 生成唯一ID\n      let id = Math.random().toString(16).slice(2);\n      const newTodo = [...state, { id, task: action.task, done: false }]\n      return newTodo\n    case actionTypes.DELETE_TODO:\n      return state.filter((item) => item.id !== action.id)\n    case actionTypes.TOGGLE_TODO:\n      return state.map((item) => {\n        let tempItem = { ...item };\n        if (tempItem.id === action.id) {\n          tempItem.done = !tempItem.done\n        }\n        return tempItem\n      })\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configStore from './redux';\n// 引入redux\n\n\nReactDOM.render(\n  <Provider store={configStore()}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// import { createStore } from 'redux';\n// import reducer from './redux/reducer';\n// import { addTodo, deleteTodo, toggleTodo } from './redux/actions';\n\n// const store = createStore(reducer);\n\n// store.subscribe(() => {\n//   console.log(store.getState())\n// })\n\n// store.dispatch(addTodo('学习'))\n// store.dispatch(addTodo('睡觉'))\n// store.dispatch(addTodo('睡觉'))\n// store.dispatch(deleteTodo(3))\n// store.dispatch(toggleTodo(1))\n\n","/**\n * 配置store\n */\n\nimport { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nexport default function configStore() {\n  const store = createStore(reducer);\n  console.log(store)\n  // 监听变化\n  store.subscribe(() => {\n    console.log('cg:', store.getState())\n  })\n  return store\n}"],"sourceRoot":""}